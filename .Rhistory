jobLevel <- c("boss", "fulltime", "parttime", "fulltime", "parttime")
jobLevel <- factor(jobLevel, ordered = TRUE, levels=c("parttime", "fulltime", "boss"))
calc_entropy(jobLevel)
# your code here
calc_entropy<-function(vec){
e <- 0
for(i in 1:nlevels(vec))
{
count <- length(vec) # count how many elements in the vec
ele <- sum(vec == vec[i]) # count how many elements is vec[i]
p <- ele/count
print(p)
e <- e - ( p * (log(p, base=nlevels(vec))))
print(e)
}
return(e)
}
jobLevel <- c("boss", "fulltime", "parttime", "fulltime", "parttime")
jobLevel <- factor(jobLevel, ordered = TRUE, levels=c("parttime", "fulltime", "boss"))
calc_entropy(jobLevel)
# your code here
calc_entropy<-function(vec){
e <- 0
for(i in 1:nlevels(vec))
{
count <- length(vec) # count how many elements in the vec
ele <- sum(vec == vec[i]) # count how many elements is vec[i]
p <- ele/count
print(log(p, base=nlevels(vec))
e <- e - ( p * (log(p, base=nlevels(vec))))
# your code here
calc_entropy<-function(vec){
e <- 0
for(i in 1:nlevels(vec))
{
count <- length(vec) # count how many elements in the vec
ele <- sum(vec == vec[i]) # count how many elements is vec[i]
p <- ele/count
e <- e - ( p * (log(p, base=nlevels(vec))))
print(log(p,3))
}
return(e)
}
jobLevel <- c("boss", "fulltime", "parttime", "fulltime", "parttime")
jobLevel <- factor(jobLevel, ordered = TRUE, levels=c("parttime", "fulltime", "boss"))
calc_entropy(jobLevel)
# your code here
calc_entropy<-function(vec){
e <- 0
for(i in 1:nlevels(vec))
{
count <- length(vec) # count how many elements in the vec
ele <- sum(vec == vec[i]) # count how many elements is vec[i]
p <- ele/count
e <- e - ( p * (log(p, base=nlevels(vec))))
print(log(p,base=nlevels(vec)))
}
return(e)
}
jobLevel <- c("boss", "fulltime", "parttime", "fulltime", "parttime")
jobLevel <- factor(jobLevel, ordered = TRUE, levels=c("parttime", "fulltime", "boss"))
calc_entropy(jobLevel)
log(.2, 3)
-1.464974*0.2
-0.8340438*.4
install.packages("ggplot2")
install.packages("ggplot2")
avg<-mean(df_ratios$student_ratio,na.rm = TRUE)
df_ratios <- read.csv("http://www.cse.lehigh.edu/~brian/course/2020/datascience/student-teacher-ratios.csv", header=T)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("coloarspace")
install.packages("colorspace")
# PUT YOUR CODE HERE (and run it)
library(rpart)
help(rpart)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(ggplot2)
installed.packages()
install.package('tidyverse')
install.packages('tidyverse')
df_ratios <- read.csv("http://www.cse.lehigh.edu/~brian/course/2021/datascience/student-teacher-ratios.csv", header=T)
# PUT YOUR CODE HERE
avg <- mean(df_ratios$student_ratio)
# PUT YOUR CODE HERE
avg <- mean(df_ratios$student_ratio)
avg
df_ratios$student_ratio
# PUT YOUR CODE HERE
avg <- mean(df_ratios$student_ratio,na.rm=TRUE)
avg
calc_entropy<-function(vec){
entropy<- 0
for(a in levels(vec)){
count <- 0
for(y in vec){
if(a == y){
count<- count + 1
}
}
entropy <- entropy-(count/length(a)*log((count/length(vec)),base =nlevels(vec)))
}
return(entropy)
}
test<-factor(c("1.5","1.5","1.5","1.5", "1.5"));
calc_entropy(test)
wine<-read.table('http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data',sep=',',header=FALSE,col.names = c("Class","Alcohol", "Malic.Acid", "Ash", "Alcalinity.of.Ash", "Magnesium", "Total.Phenols", "Flavanoids", "Nonflavanoid.Phenols", "Proanthocyanins", "Color.In))tensity", "Hue", "Diluted.Wines.Measure", "Proline"))
library(rpart)
wineModel<-(rpart(Class ~., data=wine,method="class"))
plot(wineModel)
text(wineModel, use.n=TRUE)
calc_entropy<-function(vec){
entropy<- 0
for(a in levels(vec)){
count <- 0
for(y in vec){
if(a == y){
count<- count + 1
}
}
entropy <- entropy-(count/length(a)*log((count/length(vec)),base =nlevels(vec)))
}
return(entropy)
}
test<-factor(c("1.5","1.5","1.5","1.5", "1.5"));
calc_entropy(test)
# PUT YOUR CODE HERE
qplot(data=df_ratios,x=region,y=student_ratio,geom="boxplot")
# PUT YOUR CODE HERE
df_ratios<-df_ratios[!is.na(df_ratios$student_ratio),]
df_ratios$region<-reorder(df_ratios$region, -df_ratios$student_ratio_region)
qplot(data = df_ratios,x=region,y=student_ratio,geom="boxplot")
# PUT YOUR CODE HERE
replot<-qplot(data = df_ratios,x=region,y=student_ratio,geom="boxplot")+coord_flip()+scale_y_continuous(limits=c(0,100))
replot
theme_set(theme_light(base_size = 15)) # Provided to the student
# PUT YOUR CODE HERE
theme_set(theme_light(base_size = 15)) # Provided to the student
# PUT YOUR CODE HERE
replot
# PUT YOUR CODE HERE
qplot(data = df_ratios,x=region,y=student_ratio,geom="boxplot",color=region)+coord_flip()+scale_y_continuous(limits=c(0,100))+xlab(NULL)+ylab("Student:teacher ratio")+theme(legend.position = "none")
# PUT YOUR CODE HERE
df_ratios$region<-reorder(df_ratios$region, -df_ratios$student_ratio_region)
g<-qplot(data = df_ratios,x=region,y=student_ratio,geom="blank",color=region)+coord_flip()+scale_y_continuous(limits=c(0,100))+xlab(NULL)+ylab("Student:teacher ratio")+theme(legend.position = "none")
g
# g # uncomment this so that we can see what this empty plot looks like
# PUT YOUR CODE HERE
df_ratios$region<-reorder(df_ratios$region, -df_ratios$student_ratio_region)
g<-qplot(data = df_ratios,x=region,y=student_ratio,geom="blank",color=region)+coord_flip()+scale_y_continuous(limits=c(0,100))+xlab(NULL)+ylab("Student:teacher ratio")+theme(legend.position = "none")
g # uncomment this so that we can see what this empty plot looks like
# PUT YOUR CODE HERE
g+geom_point()
# PUT YOUR CODE HERE
g+geom_point(alpha=0.15,size=2)
# PUT YOUR CODE HERE
g+geom_jitter(width = 2,alpha=0.2,size=2)
g+geom_jitter(width = 2,alpha=0.2,size=2)
# PUT YOUR CODE HERE
g+geom_jitter(width = .2,alpha=0.2,size=2)
# PUT YOUR CODE HERE
g+geom_boxplot(color = "gray60", outlier.alpha = 0)
# PUT YOUR CODE HERE
g+geom_boxplot(color = "gray60", outlier.alpha = 0) + +geom_jitter(width = .2,alpha=0.2,size=2)
# PUT YOUR CODE HERE
g+geom_boxplot(color = "gray60", outlier.alpha = 0) +geom_jitter(width = .2,alpha=0.2,size=2)
# PUT YOUR CODE HERE
g+geom_jitter(width = .2,alpha=0.2,size=2)+stat_summary(fun.y=mean,geom = "point",size=5)
# PUT YOUR CODE HERE
g+geom_jitter(width = .2,alpha=0.2,size=2)+stat_summary(fun=mean,geom = "point",size=5)
# PUT YOUR CODE HERE
g+geom_jitter(width = .2,alpha=0.2,size=2)+stat_summary(fun.y=mean,geom = "point",size=5) #I will get a warnning for using fun.y
# PUT YOUR CODE HERE
g+geom_jitter(width = .2,alpha=0.2,size=2)+stat_summary(fun=mean,geom = "point",size=5) #I will get a warnning for using fun.y "`fun.y` is deprecated. Use `fun` instead." So I used fun
# PUT YOUR CODE HERE
g+geom_jitter(width = .2,alpha=0.2,size=2)+stat_summary(fun.y=mean,geom = "point",size=5)+geom_hline(yintercept = avg,color="grey70",size=.8)
# this code won't run until you've completed the above (i.e., have a correct world_avg defined, etc.)
arrows <- data.frame(
x1 = c(6, 3.65, 1.8, 1.8, 1.8),
x2 = c(5.6, 4, 2.07, 2.78, 1.2),
y1 = c(world_avg + 6, 10.5, 9, 9, 76),
y2 = c(world_avg + 0.1, 18.32, 14.4, 11.85, 83.41195)
)
# this code won't run until you've completed the above (i.e., have a correct world_avg defined, etc.)
arrows <- data.frame(
x1 = c(6, 3.65, 1.8, 1.8, 1.8),
x2 = c(5.6, 4, 2.07, 2.78, 1.2),
y1 = c(avg + 6, 10.5, 9, 9, 76),
y2 = c(avg + 0.1, 18.32, 14.4, 11.85, 83.41195)
)
set.seed(123)
g2 +
geom_curve(data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2),
arrow = arrow(length = unit(0.08, "inch")), size = 0.5,
color = "gray20", curvature = -0.3) +
annotate("text", x = 6.3, y = 35, size = 2.7, color = "gray20",
label = paste("Worldwide average:\n", round(avg, 1)," students per teacher", sep="")) +
annotate("text", x = 3.5, y = 10, size = 2.7, color = "gray20",
label = "Continental average") +
annotate("text", x = 1.7, y = 11, size = 2.7, color = "gray20",
label = "Countries per continent") +
annotate("text", x = 1.9, y = 64, size = 2.7, color = "gray20",
label = "The Central African Republic has by far\nthe most students per teacher") +
scale_y_continuous(limits = c(0, 90), expand = c(0.005, 0.005),
breaks = c(1, seq(20, 80, by = 20))) +
labs(caption = "Data: UNESCO Institute for Statistics") +
theme(plot.caption = element_text(size = 9, color = "gray50"))
g2<-g+geom_jitter(width = 2,alpha=0.2,size=2)+stat_summary(fun.y=mean,geom = "point",size=5)+geom_hline(yintercept = avg,color="grey70",size=1)+geom_segment(aes(x=region,xend=region,y=avg,yend=student_ratio),size=0.8)
g2 # uncomment this so that we can see the current status
# this code won't run until you've completed the above (i.e., have a correct world_avg defined, etc.)
arrows <- data.frame(
x1 = c(6, 3.65, 1.8, 1.8, 1.8),
x2 = c(5.6, 4, 2.07, 2.78, 1.2),
y1 = c(avg + 6, 10.5, 9, 9, 76),
y2 = c(avg + 0.1, 18.32, 14.4, 11.85, 83.41195)
)
set.seed(123)
g2 +
geom_curve(data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2),
arrow = arrow(length = unit(0.08, "inch")), size = 0.5,
color = "gray20", curvature = -0.3) +
annotate("text", x = 6.3, y = 35, size = 2.7, color = "gray20",
label = paste("Worldwide average:\n", round(avg, 1)," students per teacher", sep="")) +
annotate("text", x = 3.5, y = 10, size = 2.7, color = "gray20",
label = "Continental average") +
annotate("text", x = 1.7, y = 11, size = 2.7, color = "gray20",
label = "Countries per continent") +
annotate("text", x = 1.9, y = 64, size = 2.7, color = "gray20",
label = "The Central African Republic has by far\nthe most students per teacher") +
scale_y_continuous(limits = c(0, 90), expand = c(0.005, 0.005),
breaks = c(1, seq(20, 80, by = 20))) +
labs(caption = "Data: UNESCO Institute for Statistics") +
theme(plot.caption = element_text(size = 9, color = "gray50"))
# this code won't run until you've completed the above (i.e., have a correct world_avg defined, etc.)
arrows <- data.frame(
x1 = c(6, 3.65, 1.8, 1.8, 1.8),
x2 = c(5.6, 4, 2.07, 2.78, 1.2),
y1 = c(world_avg + 6, 10.5, 9, 9, 76),
y2 = c(world_avg + 0.1, 18.32, 14.4, 11.85, 83.41195)
)
# this code won't run until you've completed the above (i.e., have a correct world_avg defined, etc.)
arrows <- data.frame(
x1 = c(6, 3.65, 1.8, 1.8, 1.8),
x2 = c(5.6, 4, 2.07, 2.78, 1.2),
y1 = c(avg + 6, 10.5, 9, 9, 76),
y2 = c(avg + 0.1, 18.32, 14.4, 11.85, 83.41195)
)
set.seed(123)
g2 +
geom_curve(data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2),
arrow = arrow(length = unit(0.08, "inch")), size = 0.5,
color = "gray20", curvature = -0.3) +
annotate("text", x = 6.3, y = 35, size = 2.7, color = "gray20",
label = paste("Worldwide average:\n", round(world_avg, 1)," students per teacher", sep="")) +
annotate("text", x = 3.5, y = 10, size = 2.7, color = "gray20",
label = "Continental average") +
annotate("text", x = 1.7, y = 11, size = 2.7, color = "gray20",
label = "Countries per continent") +
annotate("text", x = 1.9, y = 64, size = 2.7, color = "gray20",
label = "The Central African Republic has by far\nthe most students per teacher") +
scale_y_continuous(limits = c(0, 90), expand = c(0.005, 0.005),
breaks = c(1, seq(20, 80, by = 20))) +
labs(caption = "Data: UNESCO Institute for Statistics") +
theme(plot.caption = element_text(size = 9, color = "gray50"))
# this code won't run until you've completed the above (i.e., have a correct world_avg defined, etc.)
world_avg<-avg
arrows <- data.frame(
x1 = c(6, 3.65, 1.8, 1.8, 1.8),
x2 = c(5.6, 4, 2.07, 2.78, 1.2),
y1 = c(world_avg + 6, 10.5, 9, 9, 76),
y2 = c(world_avg + 0.1, 18.32, 14.4, 11.85, 83.41195)
)
set.seed(123)
g2 +
geom_curve(data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2),
arrow = arrow(length = unit(0.08, "inch")), size = 0.5,
color = "gray20", curvature = -0.3) +
annotate("text", x = 6.3, y = 35, size = 2.7, color = "gray20",
label = paste("Worldwide average:\n", round(world_avg, 1)," students per teacher", sep="")) +
annotate("text", x = 3.5, y = 10, size = 2.7, color = "gray20",
label = "Continental average") +
annotate("text", x = 1.7, y = 11, size = 2.7, color = "gray20",
label = "Countries per continent") +
annotate("text", x = 1.9, y = 64, size = 2.7, color = "gray20",
label = "The Central African Republic has by far\nthe most students per teacher") +
scale_y_continuous(limits = c(0, 90), expand = c(0.005, 0.005),
breaks = c(1, seq(20, 80, by = 20))) +
labs(caption = "Data: UNESCO Institute for Statistics") +
theme(plot.caption = element_text(size = 9, color = "gray50"))
# PUT YOUR CODE HERE
g2 <- g+geom_jitter(width = .2,alpha=0.2,size=2)+stat_summary(fun.y=mean,geom = "point",size=5)+geom_hline(yintercept = avg,color="grey70",size=1)+geom_segment(aes(x=region,xend=region,y=avg,yend=student_ratio),size=0.8)
# g2 # uncomment this so that we can see the current status
# this code won't run until you've completed the above (i.e., have a correct world_avg defined, etc.)
world_avg<-avg
arrows <- data.frame(
x1 = c(6, 3.65, 1.8, 1.8, 1.8),
x2 = c(5.6, 4, 2.07, 2.78, 1.2),
y1 = c(world_avg + 6, 10.5, 9, 9, 76),
y2 = c(world_avg + 0.1, 18.32, 14.4, 11.85, 83.41195)
)
set.seed(123)
g2 +
geom_curve(data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2),
arrow = arrow(length = unit(0.08, "inch")), size = 0.5,
color = "gray20", curvature = -0.3) +
annotate("text", x = 6.3, y = 35, size = 2.7, color = "gray20",
label = paste("Worldwide average:\n", round(world_avg, 1)," students per teacher", sep="")) +
annotate("text", x = 3.5, y = 10, size = 2.7, color = "gray20",
label = "Continental average") +
annotate("text", x = 1.7, y = 11, size = 2.7, color = "gray20",
label = "Countries per continent") +
annotate("text", x = 1.9, y = 64, size = 2.7, color = "gray20",
label = "The Central African Republic has by far\nthe most students per teacher") +
scale_y_continuous(limits = c(0, 90), expand = c(0.005, 0.005),
breaks = c(1, seq(20, 80, by = 20))) +
labs(caption = "Data: UNESCO Institute for Statistics") +
theme(plot.caption = element_text(size = 9, color = "gray50"))
tf <- 1
TC <- ((tf-32) * 5)/9
TC
with()
help("with")
install.packages("data.world")
install.packages(c("httr","readr","rjson","xml2")) # these are prerequisites for dwapi package
install.packages(c("ini","miniUI","shiny")) # these are additional prerequisites for data.world package
install.packages("stringi") # sometimes needed, doesn't hurt to add
install.packages("https://cran.r-project.org/src/contrib/Archive/dwapi/dwapi_0.1.3.1.tar.gz", repos=NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/data.world/data.world_1.2.2.tar.gz", repos=NULL, type="source")
# load library
library("data.world")
saved_cfg <- data.world::save_config("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmNvY29zaXl1IiwiaXNzIjoiYWdlbnQ6Y29jb3NpeXU6OmYyNmI1ZjU0LTNmODctNDM2ZC1iOWI4LTQ0OTIyNjBkMmRhOCIsImlhdCI6MTYxNDk2Njk2OSwicm9sZSI6WyJ1c2VyX2FwaV9yZWFkIiwidXNlcl9hcGlfd3JpdGUiXSwiZ2VuZXJhbC1wdXJwb3NlIjp0cnVlLCJzYW1sIjp7fX0.WEswgRgHlFmuJ2t8TgF-sMJ969jjn1GjfLdupPrA4OscOQEwThFwR2Xbqml9b5OLDk-hLwxPwLf-kB1LQAv5zQ")
data.world::set_config(saved_cfg)
intro_ds <- "https://data.world/jonloyens/an-intro-to-dataworld-dataset"
tables_df <- data.world::query(
data.world::qry_sql("SELECT * FROM Tables"),
dataset = intro_ds
)
tables_df
columns_df <- data.world::query(
data.world::qry_sql("SELECT * FROM TableColumns"),
dataset = intro_ds
)
columns_df
team_query <- data.world::qry_sql(paste0(
"SELECT * ",
"FROM DataDotWorldBBallTeam "))
team <- data.world::query(team_query, dataset = intro_ds)
str(team)
team
#THIS COMMENT LINE NEEDS TO BE REPLACED WITH YOUR CODE
status <- team
status
#THIS COMMENT LINE NEEDS TO BE REPLACED WITH YOUR CODE
#status <- team
team_query <- data.world::qry_sql(paste0(
"SELECT * ",
"FROM DataDotWorldBBallTeam "))
stats<-data.world::query(team_query,dataset=intro_ds)
str(stats)
status
#THIS COMMENT LINE NEEDS TO BE REPLACED WITH YOUR CODE
#status <- team
team_query <- data.world::qry_sql(paste0(
"SELECT * ",
"FROM DataDotWorldBBallTeam "
))
status<-data.world::query(team1, dataset=intro_ds)
#THIS COMMENT LINE NEEDS TO BE REPLACED WITH YOUR CODE
#status <- team
team_query <- data.world::qry_sql(paste0(
"SELECT * ",
"FROM DataDotWorldBBallTeam "
))
status<-data.world::query(team_query, dataset=intro_ds)
str(stats)
status
assists_vs_height <- data.world::qry_sql(paste0(
"SELECT t.Name, t.Height, s.AssistsPerGame ",
"FROM DataDotWorldBBallTeam as t ",
"JOIN DataDotWorldBBallStats as s ON t.Name = s.Name ",
"ORDER BY s.AssistsPerGame DESC"))
data.world::query(assists_vs_height, dataset = intro_ds)
team_query <- data.world::qry_sql(paste0(
"SELECT * ",
"FROM DataDotWorldBBallTeam "))
stats<-data.world::query(team_query,dataset=intro_ds)
str(stats)
stats
assists_vs_height <- data.world::qry_sql(paste0(
"SELECT t.Name, t.Height, s.AssistsPerGame ",
"FROM DataDotWorldBBallTeam as t ",
"JOIN DataDotWorldBBallStats as s ON t.Name = s.Name ",
"ORDER BY s.AssistsPerGame DESC"))
data.world::query(assists_vs_height, dataset = intro_ds)
#UNCOMMENT THE LINES BELOW
merged_df <- merge(team, stats, by.x = "name", by.y = "name")
merged_df
#UNCOMMENT THE LINES BELOW
merged_df <- merge(team, stats, by.x = "name", by.y = "name")
merged_df
companydataset <- "https://data.world/uci/wholesale-customers"
# put your commands to see the tables and columns available in this dataset here:
table_company<-data.world::qry_sql(paste0(
"SELECT *",
"FROM DataWorldBBallTeam "
))
company <- data.world::query(table_company, dataset=intro_ds)
companydataset <- "https://data.world/uci/wholesale-customers"
# put your commands to see the tables and columns available in this dataset here:
tables_cd<-data.world::query(data.world::qry_sql("SELECT * FROM Tables"), dataset=companydataset)
tables_cd
companydataset <- "https://data.world/uci/wholesale-customers"
# put your commands to see the tables and columns available in this dataset here:
tables_company<-data.world::query(data.world::qry_sql("SELECT * FROM Tables"), dataset=companydataset)
tables_company
columns_company <- data.world::query(data.world::qry_sql("SELECT * FROM TablesColumns"), dataset=companydataset)
companydataset <- "https://data.world/uci/wholesale-customers"
# put your commands to see the tables and columns available in this dataset here:
tables_company<-data.world::query(data.world::qry_sql("SELECT * FROM Tables"), dataset=companydataset)
tables_company
columns_company <- data.world::query(data.world::qry_sql("SELECT * FROM TableColumns"), dataset=companydataset)
columns_company
wholesalev <- data.world::qry_sql(paste0(
"SELECT*",
"FROM wholesalev "
))
sale <- data.world::query(wholesalev, dataset=companydataset)
dim(sale)
tail(sale)
wholesalev <- data.world::qry_sql(paste0(
"SELECT*",
"FROM wholesalev "
))
sale <- data.world::query(wholesalev, dataset=companydataset)
dim(sale)
head(sale)
tail(sale)
region_query <- data.world::qry_sql(paste0(
"SELECT region, sum(fresh) + sum(mild) + sum(grocery)+ sum(frozen)+sum(detergents_paper)+sum(delicassen) as TotalSale ",
"FROM wholesalev",
"GROUP BY region"
))
region <- data.world::query(region_query, dataset = companydataset)
sale_query <- data.world::qry_sql(paste0(
"SELECT region, sum(fresh)+sum(milk)+sum(grocery)+sum(frozen)+sum(detergents_paper)+sum(delicassen) as TotalSale ",
"FROM wholesalev ",
"GROUP BY region"))
sale <- data.world::query(sale_query, dataset = companydataset)
sale
region_query <- data.world::qry_sql(paste0(
"SELECT region, sum(fresh) + sum(milk) + sum(grocery)+ sum(frozen)+sum(detergents_paper)+sum(delicassen) as TotalSale ",
"FROM wholesalev",
"GROUP BY region"
))
region <- data.world::query(region_query, dataset = companydataset)
region_query <- data.world::qry_sql(paste0(
"SELECT region, sum(fresh)+sum(milk)+sum(grocery)+sum(frozen)+sum(detergents_paper)+sum(delicassen) as TotalSale ",
"FROM wholesalev ",
"GROUP BY region"))
region <- data.world::query(region_query, dataset = companydataset)
region
region_query <- data.world::qry_sql(paste0(
"SELECT region, sum(fresh) + sum(milk) + sum(grocery)+ sum(frozen)+sum(detergents_paper)+sum(delicassen) as TotalSale ",
"FROM wholesalev",
"GROUP BY region"))
#sale_query <- data.world::qry_sql(paste0(
"SELECT region, sum(fresh)+sum(milk)+sum(grocery)+sum(frozen)+sum(detergents_paper)+sum(delicassen) as TotalSale ",
region_query <- data.world::qry_sql(paste0(
"SELECT region, sum(fresh)+sum(milk)+sum(grocery)+sum(frozen)+sum(detergents_paper)+sum(delicassen) as TotalSale ",
"FROM wholesalev",
"GROUP BY region"))
region <- data.world::query(region_query, dataset = companydataset)
region_query <- data.world::qry_sql(paste0(
"SELECT region, sum(fresh)+sum(milk)+sum(grocery)+sum(frozen)+sum(detergents_paper)+sum(delicassen) as TotalSale ",
"FROM wholesalev ",
"GROUP BY region"))
region <- data.world::query(region_query, dataset = companydataset)
region
region_query <- data.world::qry_sql(paste0(
"SELECT region, sum(fresh)+sum(milk)+sum(grocery)+sum(frozen)+sum(detergents_paper)+sum(delicassen) as TotalSale ",
"FROM wholesalev ",
"GROUP BY region"))
region <- data.world::query(region_query, dataset = companydataset)
region
sales_query<-data.world::qry_sql(paste0("SELECT * ","FROM wholesalev "))
sale<-data.world::query(sales_query,dataset=companydataset)
dim(sale)
head(sale)
tail(sale)
sale_query <- data.world::qry_sql(paste0(
"SELECT region, sum(fresh)+sum(milk)+sum(grocery)+sum(frozen)+sum(detergents_paper)+sum(delicassen) as TotalSale ",
"FROM wholesalev ",
"GROUP BY region"))
sale <- data.world::query(sale_query, dataset = companydataset)
sale
library(ggplot2)
ggplot(sale, aes(y=sake$TotalSale, x=sale$region)) + geom_bar(stat = "identity")
library(ggplot2)
ggplot(sale, aes(y=sale$TotalSale, x=sale$region)) + geom_bar(stat = "identity")
library(ggplot2)
ggplot(sale, aes(y=sale$TotalSale,x=sale$region)) + geom_bar(stat = "identity")
library(ggplot2)
ggplot(sale, aes(y=TotalSale, x=sale$region)) + geom_bar(stat = "identity")
library(ggplot2)
ggplot(sale, aes(y=TotalSale, x=region)) + geom_bar(stat = "identity")
